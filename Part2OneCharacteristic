import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from datetime import datetime

def plot_water_quality_characteristic(file_path, characteristic, site_id=None, start_date=None, end_date=None, output_file=None):
    """
    Access a CSV file containing water quality data, filter for a specific characteristic,
    and plot the results with measured values on the y-axis and time on the x-axis.
    
    Args:
        file_path (str): Path to the CSV file containing water quality data.
        characteristic (str): The water quality characteristic to filter and plot (e.g., 'pH', 'Temperature', 'Dissolved Oxygen').
        site_id (str, optional): Filter data for a specific monitoring site ID. If None, includes all sites.
        start_date (str, optional): Start date for filtering in 'YYYY-MM-DD' format. If None, includes all dates.
        end_date (str, optional): End date for filtering in 'YYYY-MM-DD' format. If None, includes all dates.
        output_file (str, optional): Path to save the plot. If None, the plot is displayed but not saved.
    
    Returns:
        matplotlib.figure.Figure: The generated plot figure.
    """
    try:
        # Read the CSV file
        print(f"Reading data from {file_path}...")
        df = pd.read_csv(file_path)
        
        # Assuming the CSV has columns for:
        # - date/time (e.g., 'ActivityStartDate' or 'SampleDate')
        # - characteristic name (e.g., 'CharacteristicName')
        # - result value (e.g., 'ResultValue' or 'MeasuredValue')
        # - monitoring location ID (e.g., 'MonitoringLocationIdentifier')
        # - units (e.g., 'ResultMeasure/MeasureUnitCode')
        
        # Identify date column - adjust these potential column names based on your actual data
        date_columns = ['ActivityStartDate', 'SampleDate', 'ActivityDate', 'Date', 'TimeStamp']
        date_col = next((col for col in date_columns if col in df.columns), None)
        
        if not date_col:
            print("Error: Could not find a date column in the CSV file.")
            return None
            
        # Identify characteristic column
        char_columns = ['CharacteristicName', 'ParameterName', 'Characteristic', 'Parameter']
        char_col = next((col for col in char_columns if col in df.columns), None)
        
        if not char_col:
            print("Error: Could not find a characteristic/parameter column in the CSV file.")
            return None
            
        # Identify value column
        value_columns = ['ResultValue', 'MeasuredValue', 'Value', 'Result', 'ResultMeasureValue']
        value_col = next((col for col in value_columns if col in df.columns), None)
        
        if not value_col:
            print("Error: Could not find a result/value column in the CSV file.")
            return None
            
        # Identify site ID column
        site_columns = ['MonitoringLocationIdentifier', 'StationID', 'SiteID', 'LocationID']
        site_col = next((col for col in site_columns if col in df.columns), None)
        
        # Identify units column (optional)
        unit_columns = ['ResultMeasure/MeasureUnitCode', 'MeasureUnitCode', 'Units', 'Unit']
        unit_col = next((col for col in unit_columns if col in df.columns), None)
        
        # Convert date column to datetime
        df[date_col] = pd.to_datetime(df[date_col], errors='coerce')
        
        # Filter for the specified characteristic (case-insensitive contains match)
        filtered_df = df[df[char_col].str.contains(characteristic, case=False, na=False)]
        
        if filtered_df.empty:
            print(f"No data found for characteristic: {characteristic}")
            print(f"Available characteristics: {df[char_col].unique()}")
            return None
            
        # Filter by site ID if provided
        if site_id and site_col in df.columns:
            filtered_df = filtered_df[filtered_df[site_col] == site_id]
            if filtered_df.empty:
                print(f"No data found for site ID: {site_id}")
                return None
                
        # Filter by date range if provided
        if start_date:
            start_date = pd.to_datetime(start_date)
            filtered_df = filtered_df[filtered_df[date_col] >= start_date]
            
        if end_date:
            end_date = pd.to_datetime(end_date)
            filtered_df = filtered_df[filtered_df[date_col] <= end_date]
            
        if filtered_df.empty:
            print("No data found after applying all filters.")
            return None
            
        # Convert result values to numeric
        filtered_df[value_col] = pd.to_numeric(filtered_df[value_col], errors='coerce')
        
        # Drop rows with NaN values
        filtered_df = filtered_df.dropna(subset=[date_col, value_col])
        
        if filtered_df.empty:
            print("No valid numerical data found after conversion.")
            return None
            
        # Sort by date
        filtered_df = filtered_df.sort_values(by=date_col)
        
        # Get units if available
        units = ""
        if unit_col and unit_col in filtered_df.columns:
            # Get the most common unit
            units = filtered_df[unit_col].mode().iloc[0] if not filtered_df[unit_col].isna().all() else ""
            
        # Create the plot
        plt.figure(figsize=(12, 6))
        
        # If there are multiple sites, plot each one with a different color
        if site_col in filtered_df.columns and len(filtered_df[site_col].unique()) > 1:
            # Set the style
            sns.set_style("whitegrid")
            
            # Create a plot for each site
            ax = sns.lineplot(
                data=filtered_df,
                x=date_col,
                y=value_col,
                hue=site_col,
                marker='o',
                markersize=6
            )
            
            plt.legend(title="Monitoring Site", bbox_to_anchor=(1.05, 1), loc='upper left')
        else:
            # Single site or no site information - simple time series
            plt.plot(filtered_df[date_col], filtered_df[value_col], 'o-', color='#3498db', linewidth=2, markersize=6)
            
        # Format the x-axis to show dates nicely
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.gca().xaxis.set_major_locator(mdates.AutoDateLocator())
        plt.gcf().autofmt_xdate()  # Rotate date labels
        # Add labels and title
        plt.xlabel('Date', fontsize=12)
        y_label = f"{characteristic} ({units})" if units else characteristic
        plt.ylabel(y_label, fontsize=12)
        plt.title(f"{characteristic} Time Series", fontsize=14, fontweight='bold')
        
        # Add grid for better readability
        plt.grid(True, linestyle='--', alpha=0.7)
        
        # Add statistics in text box
        stats_text = (
            f"Statistics:\n"
            f"Count: {len(filtered_df)}\n"
            f"Min: {filtered_df[value_col].min():.2f}\n"
            f"Max: {filtered_df[value_col].max():.2f}\n"
            f"Mean: {filtered_df[value_col].mean():.2f}\n"
            f"Median: {filtered_df[value_col].median():.2f}"
        )
        
        plt.figtext(0.02, 0.02, stats_text, fontsize=10,
                   bbox=dict(facecolor='white', alpha=0.8, boxstyle='round,pad=0.5'))
        
        # Adjust layout to make room for labels
        plt.tight_layout()
        
        # Save the plot if output file is specified
        if output_file:
            plt.savefig(output_file, dpi=300, bbox_inches='tight')
            print(f"Plot saved to {output_file}")
            
        # Show the plot
        plt.show()
        
        return plt.gcf()
        
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
    except pd.errors.EmptyDataError:
        print(f"Error: The file '{file_path}' is empty.")
    except pd.errors.ParserError:
        print(f"Error: Unable to parse '{file_path}'. Please check the file format.")
    except Exception as e:
        print(f"An unexpected error occurred: {str(e)}")
        
    return None
